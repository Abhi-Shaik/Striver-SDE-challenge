#include<bits/stdc++.h>
int solve(vector<int>&values,vector<int>&weights,int idx,int w,vector<vector<int>>&dp){
	if(idx==0){
		if(w>=weights[idx])
			return values[idx];
		return 0;
	}
	if(dp[idx][w]!=-1)
		return dp[idx][w];
	int take=0;
	if(weights[idx]<=w){
		take=values[idx]+solve(values,weights,idx-1,w-weights[idx],dp);
	}
	int not_take=solve(values,weights,idx-1,w,dp);
	return dp[idx][w]=max(take,not_take);
}
int maxProfit(vector<int> &values, vector<int> &weights, int n, int w)
{
	// Write your code here
	vector<vector<int>>dp(n,vector<int>(w+1,0));
	for(int i=0;i<n;i++){
		for(int j=0;j<=w;j++){
			if(i==0){
				if(j>=weights[0])
					dp[i][j]=values[i];
			}
			else{
				int take=0;
				if(weights[i]<=j){
					take=values[i]+dp[i-1][j-weights[i]];
				}
				int not_take=dp[i-1][j];
				dp[i][j]=max(take,not_take);
			}
		}
	}
	return dp[n-1][w];
	
}
