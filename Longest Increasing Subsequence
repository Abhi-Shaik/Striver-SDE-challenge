#include<bits/stdc++.h>

int solve(int arr[],int idx,int n,int prev,vector<vector<int>>&dp){
    if(idx>n)
        return 0;
    int take=0;
    if(dp[idx][prev+1]!=-1)
        return dp[idx][prev+1];
    if(prev==-1 || arr[idx]>arr[prev]){
        take=1+solve(arr,idx+1,n,idx,dp);
    }
    int not_take=solve(arr,idx+1,n,prev,dp);
    return dp[idx][prev+1]=max(take,not_take);
}
int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<vector<int>>dp(n+1,vector<int>(n+1,0));
    for(int idx=n-1;idx>=0;idx--){
        for(int prev=idx-1;prev>=-1;prev--){
            int take=0;
            if(prev==-1 || arr[idx]>arr[prev]){
                take=1+dp[idx+1][idx+1];
            }
            int not_take=dp[idx+1][prev+1];
            dp[idx][prev+1]=max(take,not_take);
        }
    }

    return dp[0][0];
}
